//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Mapping;

namespace Invenietis.Database.Entities
{
	/// <summary>
	/// Database       : Invenietis
	/// Data Source    : .
	/// Server Version : 12.00.4213
	/// </summary>
	public partial class InvenietisDB : LinqToDB.Data.DataConnection
	{
		public ITable<tInvariant>          tInvariants         { get { return this.GetTable<tInvariant>(); } }
		public ITable<tItemVersion>        tItemVersions       { get { return this.GetTable<tItemVersion>(); } }
		public ITable<tLCID>               tLCIDs              { get { return this.GetTable<tLCID>(); } }
		public ITable<tLearning>           tLearnings          { get { return this.GetTable<tLearning>(); } }
		public ITable<tLearningCategory>   tLearningCategories { get { return this.GetTable<tLearningCategory>(); } }
		public ITable<tProject>            tProjects           { get { return this.GetTable<tProject>(); } }
		public ITable<tProjectCategory>    tProjectCategories  { get { return this.GetTable<tProjectCategory>(); } }
		public ITable<tRes>                tRes                { get { return this.GetTable<tRes>(); } }
		public ITable<tResHtml>            tResHtmls           { get { return this.GetTable<tResHtml>(); } }
		public ITable<tResString>          tResStrings         { get { return this.GetTable<tResString>(); } }
		public ITable<tResText>            tResTexts           { get { return this.GetTable<tResText>(); } }
		public ITable<tSetupMemory>        tSetupMemories      { get { return this.GetTable<tSetupMemory>(); } }
		public ITable<tSystem>             tSystems            { get { return this.GetTable<tSystem>(); } }
		public ITable<tXLCID>              tXLCIDs             { get { return this.GetTable<tXLCID>(); } }
		public ITable<tXLCIDMap>           tXLCIDMaps          { get { return this.GetTable<tXLCIDMap>(); } }
		public ITable<vLCID>               vLCIDs              { get { return this.GetTable<vLCID>(); } }
		public ITable<vRes>                vRes                { get { return this.GetTable<vRes>(); } }
		public ITable<vRes_AllChildren>    vRes_AllChildren    { get { return this.GetTable<vRes_AllChildren>(); } }
		public ITable<vRes_DirectChildren> vRes_DirectChildren { get { return this.GetTable<vRes_DirectChildren>(); } }
		public ITable<vRes_ParentPrefixes> vRes_ParentPrefixes { get { return this.GetTable<vRes_ParentPrefixes>(); } }
		public ITable<vResHtml>            vResHtmls           { get { return this.GetTable<vResHtml>(); } }
		public ITable<vResString>          vResStrings         { get { return this.GetTable<vResString>(); } }
		public ITable<vResText>            vResTexts           { get { return this.GetTable<vResText>(); } }
		public ITable<vXLCID>              vXLCIDs             { get { return this.GetTable<vXLCID>(); } }
		public ITable<vXLCIDResHtml>       vXLCIDResHtmls      { get { return this.GetTable<vXLCIDResHtml>(); } }
		public ITable<vXLCIDResString>     vXLCIDResStrings    { get { return this.GetTable<vXLCIDResString>(); } }
		public ITable<vXLCIDResText>       vXLCIDResTexts      { get { return this.GetTable<vXLCIDResText>(); } }

		public InvenietisDB()
		{
			InitDataContext();
		}

		public InvenietisDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		#region Table Functions

		#region fResNamePrefixes

		public partial class fResNamePrefixesResult
		{
			public long?  ParentLevel  { get; set; }
			public string ParentPrefix { get; set; }
		}

		[Sql.TableFunction(Schema="CK", Name="fResNamePrefixes")]
		public ITable<fResNamePrefixesResult> fResNamePrefixes(string @ResName)
		{
			return this.GetTable<fResNamePrefixesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				@ResName);
		}

		#endregion

		#endregion

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				field,
				text);
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="CKCore", Name="tInvariant")]
	public partial class tInvariant
	{
		[PrimaryKey, NotNull    ] public string    InvariantKey   { get; set; } // varchar(96)
		[Column,     NotNull    ] public bool      Ignored        { get; set; } // bit
		[Column,     NotNull    ] public string    CountSelect    { get; set; } // nvarchar(2048)
		[Column,     NotNull    ] public int       MinValidCount  { get; set; } // int
		[Column,     NotNull    ] public int       MaxValidCount  { get; set; } // int
		[Column,        Nullable] public int?      LastCount      { get; set; } // int
		[Column,        Nullable] public string    LastError      { get; set; } // nvarchar(2048)
		[Column,        Nullable] public DateTime? LastRunDateUTC { get; set; } // datetime2(7)
		[Column,     NotNull    ] public string    RunStatus      { get; set; } // varchar(12)
	}

	[Table(Schema="CKCore", Name="tItemVersion")]
	public partial class tItemVersion
	{
		[PrimaryKey, NotNull] public string FullName    { get; set; } // nvarchar(128)
		[Column,     NotNull] public string ItemType    { get; set; } // varchar(16)
		[Column,     NotNull] public string ItemVersion { get; set; } // varchar(32)
	}

	[Table(Schema="CK", Name="tLCID")]
	public partial class tLCID
	{
		[PrimaryKey, NotNull] public short  LCID        { get; set; } // smallint
		[Column,     NotNull] public string Name        { get; set; } // varchar(20)
		[Column,     NotNull] public string EnglishName { get; set; } // varchar(50)
		[Column,     NotNull] public string NativeName  { get; set; } // nvarchar(50)
		[Column,     NotNull] public short  ParentLCID  { get; set; } // smallint

		#region Associations

		/// <summary>
		/// FK_CK_LCID_ParentLCID
		/// </summary>
		[Association(ThisKey="ParentLCID", OtherKey="LCID", CanBeNull=false, KeyName="FK_CK_LCID_ParentLCID", BackReferenceName="FK_CK_LCID_ParentLCID_BackReferences")]
		public tLCID LCIDParentLCID { get; set; }

		/// <summary>
		/// FK_CK_LCID_XLCID
		/// </summary>
		[Association(ThisKey="LCID", OtherKey="XLCID", CanBeNull=false, KeyName="FK_CK_LCID_XLCID", BackReferenceName="LCIDXLCID")]
		public tXLCID LCIDXLCID { get; set; }

		/// <summary>
		/// FK_CK_LCID_ParentLCID_BackReference
		/// </summary>
		[Association(ThisKey="LCID", OtherKey="ParentLCID", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<tLCID> FK_CK_LCID_ParentLCID_BackReferences { get; set; }

		/// <summary>
		/// FK_CK_ResHtml_LCID_BackReference
		/// </summary>
		[Association(ThisKey="LCID", OtherKey="LCID", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<tResHtml> ResHtmlLCIDs { get; set; }

		/// <summary>
		/// FK_CK_ResString_LCID_BackReference
		/// </summary>
		[Association(ThisKey="LCID", OtherKey="LCID", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<tResString> ResStringLCIDs { get; set; }

		/// <summary>
		/// FK_CK_ResText_LCID_BackReference
		/// </summary>
		[Association(ThisKey="LCID", OtherKey="LCID", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<tResText> ResTextLCIDs { get; set; }

		/// <summary>
		/// FK_CK_XLCIDMap_LCID_BackReference
		/// </summary>
		[Association(ThisKey="LCID", OtherKey="LCID", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<tXLCIDMap> XLCIDMapLCIDs { get; set; }

		#endregion
	}

	[Table(Schema="Inv", Name="tLearning")]
	public partial class tLearning
	{
		[PrimaryKey, NotNull    ] public int       LearningId     { get; set; } // int
		[Column,     NotNull    ] public int       ResId          { get; set; } // int
		[Column,     NotNull    ] public int       CategoryId     { get; set; } // int
		[Column,     NotNull    ] public string    Content        { get; set; } // xml
		[Column,     NotNull    ] public DateTime  CreationDate   { get; set; } // datetime2(0)
		[Column,        Nullable] public DateTime? LastUpdateDate { get; set; } // datetime2(0)

		#region Associations

		/// <summary>
		/// FK_tLearning_CategoryId
		/// </summary>
		[Association(ThisKey="CategoryId", OtherKey="LearningCategoryId", CanBeNull=false, KeyName="FK_tLearning_CategoryId", BackReferenceName="tLearningCategoryIds")]
		public tLearningCategory FK_tLearning_CategoryId { get; set; }

		/// <summary>
		/// FK_tLearning_ResId
		/// </summary>
		[Association(ThisKey="ResId", OtherKey="ResId", CanBeNull=false, KeyName="FK_tLearning_ResId", BackReferenceName="tLearningResIds")]
		public tRes FK_tLearning_ResId { get; set; }

		#endregion
	}

	[Table(Schema="Inv", Name="tLearningCategory")]
	public partial class tLearningCategory
	{
		[PrimaryKey, NotNull] public int LearningCategoryId { get; set; } // int
		[Column,     NotNull] public int ResId              { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_tLearningCategory_ResId
		/// </summary>
		[Association(ThisKey="ResId", OtherKey="ResId", CanBeNull=false, KeyName="FK_tLearningCategory_ResId", BackReferenceName="tLearningCategoryResIds")]
		public tRes FK_tLearningCategory_ResId { get; set; }

		/// <summary>
		/// FK_tLearning_CategoryId_BackReference
		/// </summary>
		[Association(ThisKey="LearningCategoryId", OtherKey="CategoryId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<tLearning> tLearningCategoryIds { get; set; }

		#endregion
	}

	[Table(Schema="Inv", Name="tProject")]
	public partial class tProject
	{
		[PrimaryKey, NotNull    ] public int       ProjectId      { get; set; } // int
		[Column,     NotNull    ] public int       ResId          { get; set; } // int
		[Column,     NotNull    ] public int       CategoryId     { get; set; } // int
		[Column,     NotNull    ] public string    Content        { get; set; } // xml
		[Column,     NotNull    ] public DateTime  CreationDate   { get; set; } // datetime2(0)
		[Column,        Nullable] public DateTime? LastUpdateDate { get; set; } // datetime2(0)

		#region Associations

		/// <summary>
		/// FK_tProject_ResId
		/// </summary>
		[Association(ThisKey="ResId", OtherKey="ResId", CanBeNull=false, KeyName="FK_tProject_ResId", BackReferenceName="tProjectResIds")]
		public tRes FK_tProject_ResId { get; set; }

		/// <summary>
		/// FK_tProject_CategoryId
		/// </summary>
		[Association(ThisKey="CategoryId", OtherKey="ProjectCategoryId", CanBeNull=false, KeyName="FK_tProject_CategoryId", BackReferenceName="tProjectCategoryIds")]
		public tProjectCategory FK_tProject_CategoryId { get; set; }

		#endregion
	}

	[Table(Schema="Inv", Name="tProjectCategory")]
	public partial class tProjectCategory
	{
		[PrimaryKey, NotNull] public int ProjectCategoryId { get; set; } // int
		[Column,     NotNull] public int ResId             { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_tProjectCategory_ResId
		/// </summary>
		[Association(ThisKey="ResId", OtherKey="ResId", CanBeNull=false, KeyName="FK_tProjectCategory_ResId", BackReferenceName="tProjectCategoryResIds")]
		public tRes FK_tProjectCategory_ResId { get; set; }

		/// <summary>
		/// FK_tProject_CategoryId_BackReference
		/// </summary>
		[Association(ThisKey="ProjectCategoryId", OtherKey="CategoryId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<tProject> tProjectCategoryIds { get; set; }

		#endregion
	}

	[Table(Schema="CK", Name="tRes")]
	public partial class tRes
	{
		[PrimaryKey, Identity] public int    ResId   { get; set; } // int
		[Column,     NotNull ] public string ResName { get; set; } // varchar(128)

		#region Associations

		/// <summary>
		/// FK_tLearningCategory_ResId_BackReference
		/// </summary>
		[Association(ThisKey="ResId", OtherKey="ResId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<tLearningCategory> tLearningCategoryResIds { get; set; }

		/// <summary>
		/// FK_tProjectCategory_ResId_BackReference
		/// </summary>
		[Association(ThisKey="ResId", OtherKey="ResId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<tProjectCategory> tProjectCategoryResIds { get; set; }

		/// <summary>
		/// FK_tLearning_ResId_BackReference
		/// </summary>
		[Association(ThisKey="ResId", OtherKey="ResId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<tLearning> tLearningResIds { get; set; }

		/// <summary>
		/// FK_tProject_ResId_BackReference
		/// </summary>
		[Association(ThisKey="ResId", OtherKey="ResId", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<tProject> tProjectResIds { get; set; }

		#endregion
	}

	[Table(Schema="CK", Name="tResHtml")]
	public partial class tResHtml
	{
		[PrimaryKey(1), NotNull] public int    ResId { get; set; } // int
		[PrimaryKey(2), NotNull] public short  LCID  { get; set; } // smallint
		[Column,        NotNull] public string Value { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// FK_CK_ResHtml_LCID
		/// </summary>
		[Association(ThisKey="LCID", OtherKey="LCID", CanBeNull=false, KeyName="FK_CK_ResHtml_LCID", BackReferenceName="ResHtmlLCIDs")]
		public tLCID ResHtmlLCID { get; set; }

		#endregion
	}

	[Table(Schema="CK", Name="tResString")]
	public partial class tResString
	{
		[PrimaryKey(1), NotNull] public int    ResId { get; set; } // int
		[PrimaryKey(2), NotNull] public short  LCID  { get; set; } // smallint
		[Column,        NotNull] public string Value { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// FK_CK_ResString_LCID
		/// </summary>
		[Association(ThisKey="LCID", OtherKey="LCID", CanBeNull=false, KeyName="FK_CK_ResString_LCID", BackReferenceName="ResStringLCIDs")]
		public tLCID ResStringLCID { get; set; }

		#endregion
	}

	[Table(Schema="CK", Name="tResText")]
	public partial class tResText
	{
		[PrimaryKey(1), NotNull] public int    ResId { get; set; } // int
		[PrimaryKey(2), NotNull] public short  LCID  { get; set; } // smallint
		[Column,        NotNull] public string Value { get; set; } // nvarchar(max)

		#region Associations

		/// <summary>
		/// FK_CK_ResText_LCID
		/// </summary>
		[Association(ThisKey="LCID", OtherKey="LCID", CanBeNull=false, KeyName="FK_CK_ResText_LCID", BackReferenceName="ResTextLCIDs")]
		public tLCID ResTextLCID { get; set; }

		#endregion
	}

	[Table(Schema="CKCore", Name="tSetupMemory")]
	public partial class tSetupMemory
	{
		[PrimaryKey, Identity   ] public int      SurrogateId     { get; set; } // int
		[Column,     NotNull    ] public DateTime CreationDate    { get; set; } // datetime
		[Column,     NotNull    ] public DateTime LastStartDate   { get; set; } // datetime
		[Column,     NotNull    ] public int      TotalStartCount { get; set; } // int
		[Column,     NotNull    ] public int      StartCount      { get; set; } // int
		[Column,        Nullable] public string   LastError       { get; set; } // nvarchar(max)
	}

	[Table(Schema="CKCore", Name="tSystem")]
	public partial class tSystem
	{
		[PrimaryKey, NotNull] public int      Id           { get; set; } // int
		[Column,     NotNull] public DateTime CreationDate { get; set; } // smalldatetime
		[Column,     NotNull] public short    Ver          { get; set; } // smallint
	}

	[Table(Schema="CK", Name="tXLCID")]
	public partial class tXLCID
	{
		[PrimaryKey, NotNull] public short XLCID { get; set; } // smallint

		#region Associations

		/// <summary>
		/// FK_CK_LCID_XLCID_BackReference
		/// </summary>
		[Association(ThisKey="XLCID", OtherKey="LCID", CanBeNull=true, IsBackReference=true)]
		public tLCID LCIDXLCID { get; set; }

		/// <summary>
		/// FK_CK_XLCIDMap_XLCID_BackReference
		/// </summary>
		[Association(ThisKey="XLCID", OtherKey="XLCID", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<tXLCIDMap> XLCIDMapXLCIDs { get; set; }

		#endregion
	}

	[Table(Schema="CK", Name="tXLCIDMap")]
	public partial class tXLCIDMap
	{
		[PrimaryKey(1), NotNull] public short XLCID { get; set; } // smallint
		[PrimaryKey(2), NotNull] public short Idx   { get; set; } // smallint
		[Column,        NotNull] public short LCID  { get; set; } // smallint

		#region Associations

		/// <summary>
		/// FK_CK_XLCIDMap_LCID
		/// </summary>
		[Association(ThisKey="LCID", OtherKey="LCID", CanBeNull=false, KeyName="FK_CK_XLCIDMap_LCID", BackReferenceName="XLCIDMapLCIDs")]
		public tLCID XLCIDMapLCID { get; set; }

		/// <summary>
		/// FK_CK_XLCIDMap_XLCID
		/// </summary>
		[Association(ThisKey="XLCID", OtherKey="XLCID", CanBeNull=false, KeyName="FK_CK_XLCIDMap_XLCID", BackReferenceName="XLCIDMapXLCIDs")]
		public tXLCID XLCIDMapXLCID { get; set; }

		#endregion
	}

	// View
	[Table(Schema="CK", Name="vLCID")]
	public partial class vLCID
	{
		[Column, NotNull    ] public short  LCID                  { get; set; } // smallint
		[Column, NotNull    ] public string Name                  { get; set; } // varchar(20)
		[Column, NotNull    ] public string EnglishName           { get; set; } // varchar(50)
		[Column, NotNull    ] public string NativeName            { get; set; } // nvarchar(50)
		[Column,    Nullable] public string Fallbacks             { get; set; } // nvarchar(max)
		[Column,    Nullable] public string FallbacksLCID         { get; set; } // nvarchar(max)
		[Column,    Nullable] public string FallbacksNames        { get; set; } // nvarchar(max)
		[Column,    Nullable] public string FallbacksEnglishNames { get; set; } // nvarchar(max)
		[Column,    Nullable] public string FallbacksNativeNames  { get; set; } // nvarchar(max)
	}

	// View
	[Table(Schema="CK", Name="vRes")]
	public partial class vRes
	{
		[Column, NotNull    ] public int    ResId         { get; set; } // int
		[Column, NotNull    ] public string ResName       { get; set; } // varchar(128)
		[Column,    Nullable] public int?   ChildCount    { get; set; } // int
		[Column,    Nullable] public int?   StringCount   { get; set; } // int
		[Column,    Nullable] public int?   ParentResId   { get; set; } // int
		[Column,    Nullable] public string ParentResName { get; set; } // varchar(128)
		[Column,    Nullable] public long?  ParentLevel   { get; set; } // bigint
	}

	// View
	[Table(Schema="CK", Name="vRes_AllChildren")]
	public partial class vRes_AllChildren
	{
		[Column, NotNull] public int    ResId     { get; set; } // int
		[Column, NotNull] public string ResName   { get; set; } // varchar(128)
		[Column, NotNull] public int    ChildId   { get; set; } // int
		[Column, NotNull] public string ChildName { get; set; } // varchar(128)
	}

	// View
	[Table(Schema="CK", Name="vRes_DirectChildren")]
	public partial class vRes_DirectChildren
	{
		[Column, NotNull] public int    ResId     { get; set; } // int
		[Column, NotNull] public string ResName   { get; set; } // varchar(128)
		[Column, NotNull] public int    ChildId   { get; set; } // int
		[Column, NotNull] public string ChildName { get; set; } // varchar(128)
	}

	// View
	[Table(Schema="CK", Name="vRes_ParentPrefixes")]
	public partial class vRes_ParentPrefixes
	{
		[Column, NotNull    ] public int    ResId        { get; set; } // int
		[Column, NotNull    ] public string ResName      { get; set; } // varchar(128)
		[Column,    Nullable] public int?   ParentResId  { get; set; } // int
		[Column,    Nullable] public string ParentPrefix { get; set; } // varchar(128)
		[Column,    Nullable] public long?  ParentLevel  { get; set; } // bigint
	}

	// View
	[Table(Schema="CK", Name="vResHtml")]
	public partial class vResHtml
	{
		[Column, NotNull    ] public int    ResId   { get; set; } // int
		[Column, NotNull    ] public string ResName { get; set; } // varchar(128)
		[Column, NotNull    ] public short  XLCID   { get; set; } // smallint
		[Column,    Nullable] public short? LCID    { get; set; } // smallint
		[Column,    Nullable] public string Value   { get; set; } // nvarchar(max)
	}

	// View
	[Table(Schema="CK", Name="vResString")]
	public partial class vResString
	{
		[Column, NotNull    ] public int    ResId   { get; set; } // int
		[Column, NotNull    ] public string ResName { get; set; } // varchar(128)
		[Column, NotNull    ] public short  XLCID   { get; set; } // smallint
		[Column,    Nullable] public short? LCID    { get; set; } // smallint
		[Column,    Nullable] public string Value   { get; set; } // nvarchar(max)
	}

	// View
	[Table(Schema="CK", Name="vResText")]
	public partial class vResText
	{
		[Column, NotNull    ] public int    ResId   { get; set; } // int
		[Column, NotNull    ] public string ResName { get; set; } // varchar(128)
		[Column, NotNull    ] public short  XLCID   { get; set; } // smallint
		[Column,    Nullable] public short? LCID    { get; set; } // smallint
		[Column,    Nullable] public string Value   { get; set; } // nvarchar(max)
	}

	// View
	[Table(Schema="CK", Name="vXLCID")]
	public partial class vXLCID
	{
		[Column, NotNull    ] public short  XLCID                 { get; set; } // smallint
		[Column,    Nullable] public string Fallbacks             { get; set; } // nvarchar(max)
		[Column,    Nullable] public string FallbacksLCID         { get; set; } // nvarchar(max)
		[Column,    Nullable] public string FallbacksNames        { get; set; } // nvarchar(max)
		[Column,    Nullable] public string FallbacksEnglishNames { get; set; } // nvarchar(max)
		[Column,    Nullable] public string FallbacksNativeNames  { get; set; } // nvarchar(max)
	}

	// View
	[Table(Schema="CK", Name="vXLCIDResHtml")]
	public partial class vXLCIDResHtml
	{
		[Column, NotNull    ] public int    ResId   { get; set; } // int
		[Column, NotNull    ] public string ResName { get; set; } // varchar(128)
		[Column, NotNull    ] public short  XLCID   { get; set; } // smallint
		[Column,    Nullable] public string Value   { get; set; } // nvarchar(max)
	}

	// View
	[Table(Schema="CK", Name="vXLCIDResString")]
	public partial class vXLCIDResString
	{
		[Column, NotNull    ] public int    ResId   { get; set; } // int
		[Column, NotNull    ] public string ResName { get; set; } // varchar(128)
		[Column, NotNull    ] public short  XLCID   { get; set; } // smallint
		[Column,    Nullable] public string Value   { get; set; } // nvarchar(max)
	}

	// View
	[Table(Schema="CK", Name="vXLCIDResText")]
	public partial class vXLCIDResText
	{
		[Column, NotNull    ] public int    ResId   { get; set; } // int
		[Column, NotNull    ] public string ResName { get; set; } // varchar(128)
		[Column, NotNull    ] public short  XLCID   { get; set; } // smallint
		[Column,    Nullable] public string Value   { get; set; } // nvarchar(max)
	}

	public static partial class InvenietisDBStoredProcedures
	{
		#region sErrorRethrow

		public static int sErrorRethrow(this DataConnection dataConnection, int? @ProcId)
		{
			return dataConnection.ExecuteProc("[CKCore].[sErrorRethrow]",
				new DataParameter("@ProcId", @ProcId, DataType.Int32));
		}

		#endregion

		#region sInvariantRegister

		public static int sInvariantRegister(this DataConnection dataConnection, string @InvariantKey, string @CountSelect, int? @MinValidCount, int? @MaxValidCount)
		{
			return dataConnection.ExecuteProc("[CKCore].[sInvariantRegister]",
				new DataParameter("@InvariantKey",  @InvariantKey,  DataType.VarChar),
				new DataParameter("@CountSelect",   @CountSelect,   DataType.NVarChar),
				new DataParameter("@MinValidCount", @MinValidCount, DataType.Int32),
				new DataParameter("@MaxValidCount", @MaxValidCount, DataType.Int32));
		}

		#endregion

		#region sInvariantRun

		public static int sInvariantRun(this DataConnection dataConnection, string @InvariantKey, bool? @SkipIgnore, ref bool? @Success)
		{
			var ret = dataConnection.ExecuteProc("[CKCore].[sInvariantRun]",
				new DataParameter("@InvariantKey", @InvariantKey, DataType.VarChar),
				new DataParameter("@SkipIgnore",   @SkipIgnore,   DataType.Boolean),
				new DataParameter("@Success",      @Success,      DataType.Boolean) { Direction = ParameterDirection.InputOutput });

			@Success = Converter.ChangeTypeTo<bool?>(((IDbDataParameter)dataConnection.Command.Parameters["@Success"]).Value);

			return ret;
		}

		#endregion

		#region sInvariantRunAll

		public static int sInvariantRunAll(this DataConnection dataConnection, bool? @SkipIgnore, ref bool? @Success)
		{
			var ret = dataConnection.ExecuteProc("[CKCore].[sInvariantRunAll]",
				new DataParameter("@SkipIgnore", @SkipIgnore, DataType.Boolean),
				new DataParameter("@Success",    @Success,    DataType.Boolean) { Direction = ParameterDirection.InputOutput });

			@Success = Converter.ChangeTypeTo<bool?>(((IDbDataParameter)dataConnection.Command.Parameters["@Success"]).Value);

			return ret;
		}

		#endregion

		#region sItemVersionSet

		public static int sItemVersionSet(this DataConnection dataConnection, string @ItemType, string @FullName, string @ItemVersion)
		{
			return dataConnection.ExecuteProc("[CKCore].[sItemVersionSet]",
				new DataParameter("@ItemType",    @ItemType,    DataType.VarChar),
				new DataParameter("@FullName",    @FullName,    DataType.NVarChar),
				new DataParameter("@ItemVersion", @ItemVersion, DataType.VarChar));
		}

		#endregion

		#region sResAssume

		public static int sResAssume(this DataConnection dataConnection, string @ResName, ref int? @ResIdResult)
		{
			var ret = dataConnection.ExecuteProc("[CK].[sResAssume]",
				new DataParameter("@ResName",     @ResName,     DataType.VarChar),
				new DataParameter("@ResIdResult", @ResIdResult, DataType.Int32)   { Direction = ParameterDirection.InputOutput });

			@ResIdResult = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["@ResIdResult"]).Value);

			return ret;
		}

		#endregion

		#region sResCreate

		public static int sResCreate(this DataConnection dataConnection, string @ResName, ref int? @ResIdResult)
		{
			var ret = dataConnection.ExecuteProc("[CK].[sResCreate]",
				new DataParameter("@ResName",     @ResName,     DataType.VarChar),
				new DataParameter("@ResIdResult", @ResIdResult, DataType.Int32)   { Direction = ParameterDirection.InputOutput });

			@ResIdResult = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["@ResIdResult"]).Value);

			return ret;
		}

		#endregion

		#region sResCreateAuto

		public static int sResCreateAuto(this DataConnection dataConnection, string @Prefix, ref int? @ResIdResult)
		{
			var ret = dataConnection.ExecuteProc("[CK].[sResCreateAuto]",
				new DataParameter("@Prefix",      @Prefix,      DataType.VarChar),
				new DataParameter("@ResIdResult", @ResIdResult, DataType.Int32)   { Direction = ParameterDirection.InputOutput });

			@ResIdResult = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["@ResIdResult"]).Value);

			return ret;
		}

		#endregion

		#region sResDestroy

		public static int sResDestroy(this DataConnection dataConnection, int? @ResId)
		{
			return dataConnection.ExecuteProc("[CK].[sResDestroy]",
				new DataParameter("@ResId", @ResId, DataType.Int32));
		}

		#endregion

		#region sResDestroyByPrefix

		public static int sResDestroyByPrefix(this DataConnection dataConnection, string @ResNamePrefix)
		{
			return dataConnection.ExecuteProc("[CK].[sResDestroyByPrefix]",
				new DataParameter("@ResNamePrefix", @ResNamePrefix, DataType.VarChar));
		}

		#endregion

		#region sResDestroyChildren

		public static int sResDestroyChildren(this DataConnection dataConnection, int? @ResId)
		{
			return dataConnection.ExecuteProc("[CK].[sResDestroyChildren]",
				new DataParameter("@ResId", @ResId, DataType.Int32));
		}

		#endregion

		#region sResDestroyWithChildren

		public static int sResDestroyWithChildren(this DataConnection dataConnection, int? @ResId)
		{
			return dataConnection.ExecuteProc("[CK].[sResDestroyWithChildren]",
				new DataParameter("@ResId", @ResId, DataType.Int32));
		}

		#endregion

		#region sResHtmlAssume

		public static int sResHtmlAssume(this DataConnection dataConnection, string @ResName, short? @LCID, string @Value, ref int? @ResIdResult)
		{
			var ret = dataConnection.ExecuteProc("[CK].[sResHtmlAssume]",
				new DataParameter("@ResName",     @ResName,     DataType.VarChar),
				new DataParameter("@LCID",        @LCID,        DataType.Int16),
				new DataParameter("@Value",       @Value,       DataType.NVarChar),
				new DataParameter("@ResIdResult", @ResIdResult, DataType.Int32)    { Direction = ParameterDirection.InputOutput });

			@ResIdResult = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["@ResIdResult"]).Value);

			return ret;
		}

		#endregion

		#region sResHtmlRemove

		public static int sResHtmlRemove(this DataConnection dataConnection, int? @ResId, short? @LCID)
		{
			return dataConnection.ExecuteProc("[CK].[sResHtmlRemove]",
				new DataParameter("@ResId", @ResId, DataType.Int32),
				new DataParameter("@LCID",  @LCID,  DataType.Int16));
		}

		#endregion

		#region sResHtmlSet

		public static int sResHtmlSet(this DataConnection dataConnection, int? @ResId, short? @LCID, string @Value)
		{
			return dataConnection.ExecuteProc("[CK].[sResHtmlSet]",
				new DataParameter("@ResId", @ResId, DataType.Int32),
				new DataParameter("@LCID",  @LCID,  DataType.Int16),
				new DataParameter("@Value", @Value, DataType.NVarChar));
		}

		#endregion

		#region sResRename

		public static int sResRename(this DataConnection dataConnection, int? @ResId, string @NewName, bool? @WithChildren)
		{
			return dataConnection.ExecuteProc("[CK].[sResRename]",
				new DataParameter("@ResId",        @ResId,        DataType.Int32),
				new DataParameter("@NewName",      @NewName,      DataType.VarChar),
				new DataParameter("@WithChildren", @WithChildren, DataType.Boolean));
		}

		#endregion

		#region sResStringAssume

		public static int sResStringAssume(this DataConnection dataConnection, string @ResName, short? @LCID, string @Value, ref int? @ResIdResult)
		{
			var ret = dataConnection.ExecuteProc("[CK].[sResStringAssume]",
				new DataParameter("@ResName",     @ResName,     DataType.VarChar),
				new DataParameter("@LCID",        @LCID,        DataType.Int16),
				new DataParameter("@Value",       @Value,       DataType.NVarChar),
				new DataParameter("@ResIdResult", @ResIdResult, DataType.Int32)    { Direction = ParameterDirection.InputOutput });

			@ResIdResult = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["@ResIdResult"]).Value);

			return ret;
		}

		#endregion

		#region sResStringRemove

		public static int sResStringRemove(this DataConnection dataConnection, int? @ResId, short? @LCID)
		{
			return dataConnection.ExecuteProc("[CK].[sResStringRemove]",
				new DataParameter("@ResId", @ResId, DataType.Int32),
				new DataParameter("@LCID",  @LCID,  DataType.Int16));
		}

		#endregion

		#region sResStringSet

		public static int sResStringSet(this DataConnection dataConnection, int? @ResId, short? @LCID, string @Value)
		{
			return dataConnection.ExecuteProc("[CK].[sResStringSet]",
				new DataParameter("@ResId", @ResId, DataType.Int32),
				new DataParameter("@LCID",  @LCID,  DataType.Int16),
				new DataParameter("@Value", @Value, DataType.NVarChar));
		}

		#endregion

		#region sResTextAssume

		public static int sResTextAssume(this DataConnection dataConnection, string @ResName, short? @LCID, string @Value, ref int? @ResIdResult)
		{
			var ret = dataConnection.ExecuteProc("[CK].[sResTextAssume]",
				new DataParameter("@ResName",     @ResName,     DataType.VarChar),
				new DataParameter("@LCID",        @LCID,        DataType.Int16),
				new DataParameter("@Value",       @Value,       DataType.NVarChar),
				new DataParameter("@ResIdResult", @ResIdResult, DataType.Int32)    { Direction = ParameterDirection.InputOutput });

			@ResIdResult = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["@ResIdResult"]).Value);

			return ret;
		}

		#endregion

		#region sResTextRemove

		public static int sResTextRemove(this DataConnection dataConnection, int? @ResId, short? @LCID)
		{
			return dataConnection.ExecuteProc("[CK].[sResTextRemove]",
				new DataParameter("@ResId", @ResId, DataType.Int32),
				new DataParameter("@LCID",  @LCID,  DataType.Int16));
		}

		#endregion

		#region sResTextSet

		public static int sResTextSet(this DataConnection dataConnection, int? @ResId, short? @LCID, string @Value)
		{
			return dataConnection.ExecuteProc("[CK].[sResTextSet]",
				new DataParameter("@ResId", @ResId, DataType.Int32),
				new DataParameter("@LCID",  @LCID,  DataType.Int16),
				new DataParameter("@Value", @Value, DataType.NVarChar));
		}

		#endregion

		#region sSchemaDropAllConstraints

		public static int sSchemaDropAllConstraints(this DataConnection dataConnection, string @SchemaName)
		{
			return dataConnection.ExecuteProc("[CKCore].[sSchemaDropAllConstraints]",
				new DataParameter("@SchemaName", @SchemaName, DataType.NVarChar));
		}

		#endregion

		#region sSchemaDropAllObjects

		public static int sSchemaDropAllObjects(this DataConnection dataConnection, string @SchemaName, string @ObjectType)
		{
			return dataConnection.ExecuteProc("[CKCore].[sSchemaDropAllObjects]",
				new DataParameter("@SchemaName", @SchemaName, DataType.NVarChar),
				new DataParameter("@ObjectType", @ObjectType, DataType.NVarChar));
		}

		#endregion
	}

	public static partial class SqlFunctions
	{
		#region fResNameLeaf

		[Sql.Function(Name="CK.fResNameLeaf", ServerSideOnly=true)]
		public static string fResNameLeaf(string @S)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region fResNamePrefix

		[Sql.Function(Name="CK.fResNamePrefix", ServerSideOnly=true)]
		public static string fResNamePrefix(string @S)
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static tInvariant Find(this ITable<tInvariant> table, string InvariantKey)
		{
			return table.FirstOrDefault(t =>
				t.InvariantKey == InvariantKey);
		}

		public static tItemVersion Find(this ITable<tItemVersion> table, string FullName)
		{
			return table.FirstOrDefault(t =>
				t.FullName == FullName);
		}

		public static tLCID Find(this ITable<tLCID> table, short LCID)
		{
			return table.FirstOrDefault(t =>
				t.LCID == LCID);
		}

		public static tLearning Find(this ITable<tLearning> table, int LearningId)
		{
			return table.FirstOrDefault(t =>
				t.LearningId == LearningId);
		}

		public static tLearningCategory Find(this ITable<tLearningCategory> table, int LearningCategoryId)
		{
			return table.FirstOrDefault(t =>
				t.LearningCategoryId == LearningCategoryId);
		}

		public static tProject Find(this ITable<tProject> table, int ProjectId)
		{
			return table.FirstOrDefault(t =>
				t.ProjectId == ProjectId);
		}

		public static tProjectCategory Find(this ITable<tProjectCategory> table, int ProjectCategoryId)
		{
			return table.FirstOrDefault(t =>
				t.ProjectCategoryId == ProjectCategoryId);
		}

		public static tRes Find(this ITable<tRes> table, int ResId)
		{
			return table.FirstOrDefault(t =>
				t.ResId == ResId);
		}

		public static tResHtml Find(this ITable<tResHtml> table, int ResId, short LCID)
		{
			return table.FirstOrDefault(t =>
				t.ResId == ResId &&
				t.LCID  == LCID);
		}

		public static tResString Find(this ITable<tResString> table, int ResId, short LCID)
		{
			return table.FirstOrDefault(t =>
				t.ResId == ResId &&
				t.LCID  == LCID);
		}

		public static tResText Find(this ITable<tResText> table, int ResId, short LCID)
		{
			return table.FirstOrDefault(t =>
				t.ResId == ResId &&
				t.LCID  == LCID);
		}

		public static tSetupMemory Find(this ITable<tSetupMemory> table, int SurrogateId)
		{
			return table.FirstOrDefault(t =>
				t.SurrogateId == SurrogateId);
		}

		public static tSystem Find(this ITable<tSystem> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static tXLCID Find(this ITable<tXLCID> table, short XLCID)
		{
			return table.FirstOrDefault(t =>
				t.XLCID == XLCID);
		}

		public static tXLCIDMap Find(this ITable<tXLCIDMap> table, short XLCID, short Idx)
		{
			return table.FirstOrDefault(t =>
				t.XLCID == XLCID &&
				t.Idx   == Idx);
		}
	}
}
